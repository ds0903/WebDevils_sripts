from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import time
import random
from pathlib import Path
import schedule
import logging
from logging.handlers import TimedRotatingFileHandler
import pickle
import sys
import re
from datetime import datetime, timedelta, timezone

from database import Database

# –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥—ñ–≤
logs_dir = Path('logs')
logs_dir.mkdir(exist_ok=True)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ —Ä–æ—Ç–∞—Ü—ñ—î—é –∑–∞ –¥–æ–±—É
log_file = 'logs/bot_script.log'

# –°—Ç–≤–æ—Ä—é—î–º–æ handler –∑ —Ä–æ—Ç–∞—Ü—ñ—î—é –∫–æ–∂–µ–Ω –¥–µ–Ω—å (–∑–±–µ—Ä—ñ–≥–∞—î–º–æ 1 –¥–µ–Ω—å)
file_handler = TimedRotatingFileHandler(
    log_file,
    when='midnight',
    interval=1,
    backupCount=1,  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–∞ 1 –¥–æ–±—É
    encoding='utf-8'
)
file_handler.suffix = '%Y-%m-%d'

# –ö–æ–Ω—Å–æ–ª—å–Ω–∏–π handler
console_handler = logging.StreamHandler()

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
log_format = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(log_format)
console_handler.setFormatter(log_format)

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ root logger
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logger.addHandler(file_handler)
logger.addHandler(console_handler)


class ThreadsSeleniumBot:
    def __init__(self):
        self.db = Database()
        self.sessions_dir = Path('data/sessions')
        self.sessions_dir.mkdir(parents=True, exist_ok=True)
        self.driver = None
    
    def has_cyrillic(self, text):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–∏—Ä–∏–ª–∏—Ü—é (—É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ/—Ä–æ—Å—ñ–π—Å—å–∫—ñ –±—É–∫–≤–∏)"""
        if not text:
            return False
        cyrillic_pattern = '[–∞-—è–ê-–Ø—ñ—ó—î“ë–Ü–á–Ñ“ê]'
        return bool(re.search(cyrillic_pattern, text))
    
    def get_delay(self, setting_min, setting_max):
        min_val = float(self.db.get_setting(setting_min))
        max_val = float(self.db.get_setting(setting_max))
        return random.uniform(min_val, max_val)
    
    def init_driver(self, headless=False):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è headless
        global_headless = self.db.get_setting('global_headless_mode') or 'false'
        if global_headless == 'true':
            headless = True
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
        import tempfile
        import uuid
        unique_id = f"{int(time.time())}_{uuid.uuid4().hex[:8]}"
        temp_dir = tempfile.mkdtemp(prefix=f'chrome_temp_{unique_id}_')
            
        options = Options()
        if headless:
            options.add_argument('--headless')
        options.add_argument('--disable-blink-features=AutomationControlled')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--disable-gpu')
        options.add_argument('--window-size=1920,1080')
        options.add_argument('--lang=en-US')
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –£–ù–Ü–ö–ê–õ–¨–ù–£ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
        options.add_argument(f'--user-data-dir={temp_dir}')
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        logger.info(f"üìÇ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é: {temp_dir}")
        
        self.driver = webdriver.Chrome(options=options)
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    def save_session(self, account_id):
        session_file = self.sessions_dir / f"{account_id}_session.pkl"
        cookies = self.driver.get_cookies()
        with open(session_file, 'wb') as f:
            pickle.dump(cookies, f)
    
    def load_session(self, account_id):
        session_file = self.sessions_dir / f"{account_id}_session.pkl"
        if not session_file.exists():
            return False
        
        try:
            with open(session_file, 'rb') as f:
                cookies = pickle.load(f)
            
            self.driver.get('https://www.threads.net')
            time.sleep(2)
            
            for cookie in cookies:
                if 'expiry' in cookie:
                    cookie['expiry'] = int(cookie['expiry'])
                self.driver.add_cookie(cookie)
            
            self.driver.refresh()
            time.sleep(3)
            
            if self.is_logged_in():
                logger.info(f"–°–µ—Å—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
                return True
        except:
            pass
        
        return False
    
    def is_logged_in(self):
        try:
            time.sleep(2)
            try:
                self.driver.find_element(By.XPATH, "//span[contains(text(), 'New thread')]")
                return True
            except:
                pass
            
            try:
                self.driver.find_element(By.XPATH, "//input[@placeholder='Username, phone or email']")
                return False
            except:
                return True
        except:
            return False
    
    def login(self, account):
        if self.load_session(account['id']):
            return True
        
        logger.info(f"–í—Ö—ñ–¥ @{account['username']}")
        
        try:
            self.driver.get('https://www.threads.net/login')
            time.sleep(random.uniform(3, 5))
            
            username_input = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//input[@placeholder='Username, phone or email']"))
            )
            
            username_input.click()
            time.sleep(0.5)
            username_input.clear()
            
            for char in account['username']:
                username_input.send_keys(char)
                time.sleep(random.uniform(0.1, 0.2))
            
            time.sleep(0.5)
            
            password_input = self.driver.find_element(By.XPATH, "//input[@type='password']")
            password_input.click()
            time.sleep(0.5)
            
            for char in account['password']:
                password_input.send_keys(char)
                time.sleep(random.uniform(0.1, 0.2))
            
            time.sleep(0.5)
            password_input.send_keys(Keys.RETURN)
            
            logger.info("–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–Ω—É...")
            time.sleep(12)
            
            for attempt in range(3):
                if self.is_logged_in():
                    logger.info("‚úì –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π")
                    self.save_session(account['id'])
                    return True
                logger.info(f"–©–µ —á–µ–∫–∞—î–º–æ... (—Å–ø—Ä–æ–±–∞ {attempt + 1}/3)")
                time.sleep(3)
            
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—å —É–≤—ñ–π—Ç–∏ –ø—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è")
            return False
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: {e}")
            return False
    
    def search_keyword(self, keyword, max_posts_needed):
        try:
            logger.info(f"–ü–æ—à—É–∫: {keyword} (–ø–æ—Ç—Ä—ñ–±–Ω–æ {max_posts_needed} –ø–æ—Å—Ç—ñ–≤)")
            
            # –§–Ü–õ–¨–¢–† RECENT - —à—É–∫–∞—î–º–æ —Å–≤—ñ–∂—ñ –ø–æ—Å—Ç–∏
            search_url = f"https://www.threads.net/search?q={keyword}&filter=recent"
            self.driver.get(search_url)
            
            logger.info("–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (8 —Å–µ–∫)...")
            time.sleep(8)
            
            found_posts = []
            scroll_attempts = 0
            max_scrolls = 20
            
            while len(found_posts) < max_posts_needed and scroll_attempts < max_scrolls:
                scroll_attempts += 1
                
                # –°–∫—Ä–æ–ª–∏–º–æ
                self.driver.execute_script("window.scrollBy(0, 600);")
                time.sleep(2)
                
                # –í–∏—Ç—è–≥—É—î–º–æ –ø–æ—Å—Ç–∏
                current_posts = self.extract_posts_from_page()
                
                # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø–æ—Å—Ç–∏
                for post in current_posts:
                    if post['id'] not in [p['id'] for p in found_posts]:
                        found_posts.append(post)
                
                logger.info(f"–°–∫—Ä–æ–ª {scroll_attempts}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(found_posts)}/{max_posts_needed} –ø–æ—Å—Ç—ñ–≤")
                
                if len(found_posts) >= max_posts_needed:
                    break
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –≤—ñ–∫–æ–º
            max_age_hours = int(self.db.get_setting('max_post_age_hours'))
            if max_age_hours > 0:
                cutoff_time = datetime.now(timezone.utc) - timedelta(hours=max_age_hours)
                filtered = [p for p in found_posts if p['timestamp'] >= cutoff_time]
                
                if len(filtered) < len(found_posts):
                    logger.info(f"–í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(found_posts) - len(filtered)} —Å—Ç–∞—Ä–∏—Ö –ø–æ—Å—Ç—ñ–≤ (>{max_age_hours}h)")
                
                found_posts = filtered
            
            logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(found_posts)} –ø–æ—Å—Ç—ñ–≤ –∑ –∫–∏—Ä–∏–ª–∏—Ü–µ—é")
            
            # –í–∏–≤–æ–¥–∏–º–æ —Ç–æ–ø-5
            if found_posts:
                logger.info("–¢–æ–ø-5 –ø–æ—Å—Ç—ñ–≤:")
                for i, post in enumerate(found_posts[:5], 1):
                    logger.info(f"  #{i}: [{post['time_text']}] {post['text_preview'][:60]}...")
            
            return found_posts[:max_posts_needed]
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}")
            import traceback
            traceback.print_exc()
            return []
    
    def extract_posts_from_page(self):
        """–í–∏—Ç—è–≥—É—î –ø–æ—Å—Ç–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
        posts = []
        seen_ids = set()
        
        try:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç–∏
            all_post_links = self.driver.find_elements(By.XPATH, "//a[contains(@href, '/post/')]")
            
            logger.info(f"  –ó–Ω–∞–π–¥–µ–Ω–æ {len(all_post_links)} –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ")
            
            for link in all_post_links:
                try:
                    href = link.get_attribute('href')
                    if not href or '/media' in href:
                        continue
                    
                    post_id = href.split('/')[-1].split('?')[0]
                    
                    if post_id in seen_ids:
                        continue
                    seen_ids.add(post_id)
                    
                    # –®—É–∫–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                    parent = link
                    for _ in range(8):
                        try:
                            parent = parent.find_element(By.XPATH, "..")
                        except:
                            break
                    
                    # –í–∏—Ç—è–≥—É—î–º–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    full_text = parent.text
                    
                    # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä—è–¥–∫–∏
                    lines = [line.strip() for line in full_text.split('\n') if line.strip()]
                    
                    # –®—É–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (–¥–æ–≤–≥—ñ —Ä—è–¥–∫–∏ –∑ –∫–∏—Ä–∏–ª–∏—Ü–µ—é)
                    post_text_lines = []
                    for line in lines:
                        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫—ñ —Ä—è–¥–∫–∏, username, –∫–Ω–æ–ø–∫–∏
                        if len(line) < 15:
                            continue
                        if any(x in line.lower() for x in ['reply', 'like', 'repost', 'view', 'translate', 'follow']):
                            continue
                        # –Ø–∫—â–æ —Ä—è–¥–æ–∫ –º—ñ—Å—Ç–∏—Ç—å –∫–∏—Ä–∏–ª–∏—Ü—é - –¥–æ–¥–∞—î–º–æ
                        if self.has_cyrillic(line):
                            post_text_lines.append(line)
                    
                    # –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–∏—Ä–∏–ª–∏—Ü—ñ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                    if not post_text_lines:
                        continue
                    
                    post_text = ' '.join(post_text_lines)
                    
                    logger.info(f"  ‚úÖ –ü–æ—Å—Ç {post_id}: {post_text[:60]}...")
                    
                    # –®—É–∫–∞—î–º–æ —á–∞—Å
                    post_time = datetime.now(timezone.utc)
                    time_text = "now"
                    
                    try:
                        time_elem = parent.find_element(By.TAG_NAME, "time")
                        datetime_attr = time_elem.get_attribute('datetime')
                        if datetime_attr:
                            post_time = datetime.fromisoformat(datetime_attr.replace('Z', '+00:00'))
                        time_text = time_elem.text or time_text
                    except:
                        # –®—É–∫–∞—î–º–æ —Ç–µ–∫—Å—Ç —Ç–∏–ø—É "1h", "2d"
                        for line in lines:
                            if len(line) < 5 and any(c in line for c in ['h', 'm', 'd', 's', 'w']):
                                time_text = line
                                post_time = self.parse_time_ago(line)
                                break
                    
                    posts.append({
                        'id': post_id,
                        'link': href,
                        'timestamp': post_time,
                        'time_text': time_text,
                        'text_preview': post_text[:150]
                    })
                    
                except Exception as e:
                    continue
            
            logger.info(f"  –í–∏—Ç—è–≥–Ω—É—Ç–æ {len(posts)} –ø–æ—Å—Ç—ñ–≤ –∑ –∫–∏—Ä–∏–ª–∏—Ü–µ—é")
            return posts
            
        except Exception as e:
            logger.error(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            return posts
    
    def parse_time_ago(self, time_text):
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î —Ç–µ–∫—Å—Ç —Ç–∏–ø—É '2h', '5m', '1d' –≤ timestamp"""
        try:
            time_text = time_text.lower().strip()
            now = datetime.now(timezone.utc)
            
            if 's' in time_text or 'sec' in time_text:
                seconds = int(''.join(filter(str.isdigit, time_text)))
                post_time = now - timedelta(seconds=seconds)
            elif 'm' in time_text or 'min' in time_text:
                minutes = int(''.join(filter(str.isdigit, time_text)))
                post_time = now - timedelta(minutes=minutes)
            elif 'h' in time_text or 'hour' in time_text:
                hours = int(''.join(filter(str.isdigit, time_text)))
                post_time = now - timedelta(hours=hours)
            elif 'd' in time_text or 'day' in time_text:
                days = int(''.join(filter(str.isdigit, time_text)))
                post_time = now - timedelta(days=days)
            elif 'w' in time_text or 'week' in time_text:
                weeks = int(''.join(filter(str.isdigit, time_text)))
                post_time = now - timedelta(weeks=weeks)
            else:
                post_time = now - timedelta(days=365)
            
            return post_time
        except:
            return datetime.now(timezone.utc) - timedelta(days=365)
    
    def follow_user(self):
        """–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å"""
        try:
            logger.info("–ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –∞–≤—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ—ñ–ª—å...")
            
            # –°–ö–†–û–õ–ò–ú–û –í–ì–û–†–£ –¥–æ –ø–æ—á–∞—Ç–∫—É –ø–æ—Å—Ç–∞
            self.driver.execute_script("window.scrollTo(0, 0);")
            time.sleep(3)
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å –∞–≤—Ç–æ—Ä–∞ –ü–û–°–¢–ê (–Ω–µ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤)
            try:
                profile_url = None
                username = None
                
                # –í–∏—Ç—è–≥—É—î–º–æ username –∑ URL –ø–æ—Å—Ç–∞
                # URL –≤–∏–≥–ª—è–¥–∞—î —è–∫: https://www.threads.net/@USERNAME/post/POST_ID
                current_url = self.driver.current_url
                logger.info(f"–ü–æ—Ç–æ—á–Ω–∏–π URL: {current_url}")
                
                match = re.search(r'/@([^/]+)/', current_url)
                if match:
                    username = match.group(1)
                    profile_url = f"https://www.threads.com/@{username}"
                    logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ—Ä–∞: {username}")
                else:
                    logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥–Ω—É—Ç–∏ username –∑ URL")
                    return False
                
                if not profile_url:
                    logger.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å –∞–≤—Ç–æ—Ä–∞")
                    return False
                
                logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å: {profile_url}")
                
                # –ü–ï–†–ï–•–û–î–ò–ú–û –ù–ê –ü–†–û–§–Ü–õ–¨ –ê–í–¢–û–†–ê
                self.driver.get(profile_url)
                time.sleep(4)
                
                # –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Follow –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ø—Ä–æ—Ñ—ñ–ª—é
                logger.info("–®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Follow –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—ñ...")
                
                follow_found = False
                
                # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ —Ç–∞ div –∑ —Ä–æ–ª–ª—é button
                try:
                    all_buttons = self.driver.find_elements(By.XPATH, "//button | //div[@role='button']")
                    
                    for btn in all_buttons:
                        try:
                            if not btn.is_displayed():
                                continue
                            
                            btn_text = btn.text.strip()
                            
                            # –®—É–∫–∞—î–º–æ Follow (–Ω–µ Following, –Ω–µ Followers)
                            if btn_text == 'Follow' or (btn_text and 'Follow' in btn_text and 'Following' not in btn_text and 'Followers' not in btn_text):
                                logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É Follow")
                                
                                # –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –∫–Ω–æ–ø–∫–∏
                                self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn)
                                time.sleep(1)
                                
                                try:
                                    btn.click()
                                except:
                                    self.driver.execute_script("arguments[0].click();", btn)
                                
                                time.sleep(2)
                                logger.info("‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞")
                                follow_found = True
                                break
                        except Exception as e:
                            continue
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–Ω–æ–ø–æ–∫: {e}")
                
                if not follow_found:
                    logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ Follow –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—ñ (–º–æ–∂–ª–∏–≤–æ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ)")
                
                # –ü–û–í–ï–†–¢–ê–Ñ–ú–û–°–Ø –ù–ê–ó–ê–î –ù–ê –ü–û–°–¢
                logger.info("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞–∑–∞–¥ –Ω–∞ –ø–æ—Å—Ç...")
                self.driver.back()
                time.sleep(4)
                
                return follow_found
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å: {e}")
                # –°–ø—Ä–æ–±—É—î–º–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥
                try:
                    self.driver.back()
                    time.sleep(3)
                except:
                    pass
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    def comment_on_post(self, post, comment_text, should_follow=False):
        try:
            logger.info(f"–ö–æ–º–µ–Ω—Ç—É—î–º–æ –ø–æ—Å—Ç ({post['time_text']})")
            self.driver.get(post['link'])
            time.sleep(5)
            
            # –ü—ñ–¥–ø–∏—Å–∫–∞ –ü–ï–†–ï–î –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è–º (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            if should_follow:
                self.follow_user()
                # –í–∂–µ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ø–æ—Å—Ç–∞ –ø—ñ—Å–ª—è driver.back()
                logger.info("–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è...")
                time.sleep(2)
            
            reply_texts = ["Reply to", "Reply", "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏"]
            clicked = False
            
            for reply_text in reply_texts:
                try:
                    elements = self.driver.find_elements(By.XPATH, f"//*[contains(text(), '{reply_text}')]")
                    
                    for elem in elements:
                        try:
                            if elem.is_displayed():
                                try:
                                    elem.click()
                                except:
                                    self.driver.execute_script("arguments[0].click();", elem)
                                
                                clicked = True
                                time.sleep(2)
                                break
                        except:
                            continue
                    
                    if clicked:
                        break
                except:
                    continue
            
            time.sleep(2)
            
            comment_field = None
            field_selectors = [
                "//div[@contenteditable='true']",
                "//textarea[@placeholder]",
                "//div[@role='textbox']",
            ]
            
            for selector in field_selectors:
                try:
                    fields = self.driver.find_elements(By.XPATH, selector)
                    
                    for field in fields:
                        try:
                            if field.is_displayed() and field.is_enabled():
                                comment_field = field
                                break
                        except:
                            continue
                    
                    if comment_field:
                        break
                except:
                    pass
            
            if not comment_field:
                logger.error("‚ùå –ü–æ–ª–µ –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            try:
                comment_field.click()
            except:
                self.driver.execute_script("arguments[0].click();", comment_field)
            
            time.sleep(1)
            
            try:
                comment_field.clear()
            except:
                pass
            
            time.sleep(0.5)
            
            for char in comment_text:
                comment_field.send_keys(char)
                time.sleep(random.uniform(0.05, 0.15))
            
            time.sleep(2)
            
            post_button = None
            post_selectors = [
                "//div[@role='button' and text()='Post']",
                "//button[text()='Post']",
                "//*[text()='Post']",
            ]
            
            for selector in post_selectors:
                try:
                    buttons = self.driver.find_elements(By.XPATH, selector)
                    
                    for btn in buttons:
                        try:
                            if btn.is_displayed() and btn.is_enabled():
                                post_button = btn
                                break
                        except:
                            continue
                    
                    if post_button:
                        break
                except:
                    continue
            
            if post_button:
                try:
                    post_button.click()
                except:
                    self.driver.execute_script("arguments[0].click();", post_button)
                
                time.sleep(3)
                logger.info("‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ")
                return True
            else:
                comment_field.send_keys(Keys.RETURN)
                time.sleep(3)
                logger.info("‚úÖ Enter –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
                return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è: {e}")
            return False
    
    def process_account(self, account):
        logger.info(f"=" * 50)
        logger.info(f"–ê–∫–∞—É–Ω—Ç: @{account['username']}")
        logger.info(f"=" * 50)
        
        self.init_driver()
        
        try:
            if not self.login(account):
                logger.error("‚ùå –í—Ö—ñ–¥ –Ω–µ –≤–¥–∞–≤—Å—è")
                return
            
            comments_posted = 0
            max_comments = account['max_comments_per_run']
            
            keywords = [k for k in self.db.get_all_keywords() if k['enabled']]
            
            for keyword_data in keywords:
                if comments_posted >= max_comments:
                    logger.info(f"–õ—ñ–º—ñ—Ç {max_comments} –¥–æ—Å—è–≥–Ω—É—Ç–æ")
                    break
                
                keyword = keyword_data['keyword']
                should_follow = keyword_data.get('should_follow', False)
                remaining_comments = max_comments - comments_posted
                
                # –®—É–∫–∞—î–º–æ —Å—Ç—ñ–ª—å–∫–∏ –ø–æ—Å—Ç—ñ–≤, —Å–∫—ñ–ª—å–∫–∏ —â–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏
                posts = self.search_keyword(keyword, remaining_comments)
                
                if not posts:
                    logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è '{keyword}'")
                    continue
                
                templates = self.db.get_templates_for_keyword(keyword_data['id'])
                if not templates:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–º–∞—î —à–∞–±–ª–æ–Ω—ñ–≤ –¥–ª—è {keyword}")
                    continue
                
                for post in posts:
                    if comments_posted >= max_comments:
                        break
                    
                    if self.db.is_post_commented(account['id'], post['id']):
                        logger.info(f"‚ÑπÔ∏è –ü–æ—Å—Ç {post['id']} –≤–∂–µ –∫–æ–º–µ–Ω—Ç—É–≤–∞–ª–∏, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                        continue
                    
                    comment_text = random.choice(templates)['template_text']
                    
                    # –ü–µ—Ä–µ–¥–∞—î–º–æ should_follow –≤ —Ñ—É–Ω–∫—Ü—ñ—é –∫–æ–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è
                    success = self.comment_on_post(post, comment_text, should_follow)
                    
                    status = 'success' if success else 'failed'
                    self.db.add_comment_history(
                        account['id'],
                        post['id'],
                        post['link'],
                        keyword,
                        comment_text,
                        status
                    )
                    
                    if success:
                        comments_posted += 1
                        if should_follow:
                            logger.info(f"üìä –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: {comments_posted}/{max_comments} (+ –ø—ñ–¥–ø–∏—Å–∫–∞)")
                        else:
                            logger.info(f"üìä –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: {comments_posted}/{max_comments}")
                    
                    delay = self.get_delay('delay_between_comments_min', 'delay_between_comments_max')
                    logger.info(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ {delay:.1f}—Å")
                    time.sleep(delay)
                
                delay = self.get_delay('delay_between_posts_min', 'delay_between_posts_max')
                time.sleep(delay)
            
            logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: {comments_posted}")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        
        finally:
            if self.driver:
                self.driver.quit()
                self.driver = None
    
    def run(self):
        logger.info("=" * 70)
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê")
        logger.info("=" * 70)
        
        accounts = [a for a in self.db.get_all_accounts() if a['enabled']]
        
        if not accounts:
            logger.error("‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤")
            return
        
        for account in accounts:
            try:
                self.process_account(account)
                
                if account != accounts[-1]:
                    delay = self.get_delay('delay_between_accounts_min', 'delay_between_accounts_max')
                    logger.info(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∞–∫–∞—É–Ω—Ç–∞–º–∏: {delay:.1f}—Å")
                    time.sleep(delay)
                    
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        logger.info("‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def main():
    bot = ThreadsSeleniumBot()
    
    if '--once' in sys.argv:
        logger.info("‚ÑπÔ∏è –†–µ–∂–∏–º: –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫")
        bot.run()
    else:
        db = Database()
        interval = int(db.get_setting('run_interval_minutes'))
        
        schedule.every(interval).minutes.do(bot.run)
        
        logger.info(f"üîÑ –ü–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫...")
        bot.run()
        
        logger.info(f"‚è∞ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è (–∫–æ–∂–Ω—ñ {interval} —Ö–≤–∏–ª–∏–Ω)")
        while True:
            schedule.run_pending()
            time.sleep(30)


if __name__ == '__main__':
    main()
