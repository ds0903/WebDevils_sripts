from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import json
import time
from pathlib import Path

def test_login():
    print("üîç –¢–µ—Å—Ç –≤—Ö–æ–¥—É –≤ Threads")
    print("="*60)
    
    config_file = Path('config/accounts.json')
    if not config_file.exists():
        print("‚ùå –§–∞–π–ª config/accounts.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    with open(config_file, 'r', encoding='utf-8') as f:
        accounts = json.load(f)
    
    if not accounts['accounts']:
        print("‚ùå –ù–µ–º–∞—î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤!")
        return
    
    account_id = list(accounts['accounts'].keys())[0]
    account = accounts['accounts'][account_id]
    
    username = account.get('username')
    password = account.get('password')
    
    if not username or not password:
        print("‚ùå –ù–µ–º–∞—î username –∞–±–æ password –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó!")
        print("–í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ config/accounts.json")
        return
    
    print(f"\nüìù –¢–µ—Å—Ç—É—î–º–æ –∞–∫–∞—É–Ω—Ç: {account_id}")
    print(f"üë§ Username: {username}")
    print(f"\n‚è≥ –ó–∞–ø—É—Å–∫–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä...\n")
    
    options = Options()
    options.add_argument('--disable-blink-features=AutomationControlled')
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    
    driver = webdriver.Chrome(options=options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
    
    try:
        print("üåê –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ Threads...")
        driver.get('https://www.threads.net/login')
        time.sleep(3)
        
        print("‚å®Ô∏è  –í–≤–æ–¥–∏–º–æ –¥–∞–Ω—ñ...")
        username_input = WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "//input[@name='username']"))
        )
        username_input.send_keys(username)
        time.sleep(1)
        
        password_input = driver.find_element(By.XPATH, "//input[@name='password']")
        password_input.send_keys(password)
        time.sleep(1)
        
        print("üîê –í–∏–∫–æ–Ω—É—î–º–æ –≤—Ö—ñ–¥...")
        password_input.send_keys(Keys.RETURN)
        
        time.sleep(5)
        
        try:
            driver.find_element(By.XPATH, "//input[@placeholder='Search']")
            print("\n‚úÖ –£–°–ü–Ü–•! –í—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ!")
            print("üéâ –ê–∫–∞—É–Ω—Ç –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n")
        except:
            print("\n‚ö†Ô∏è  –ú–æ–∂–ª–∏–≤–æ –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –≤—Ö–æ–¥–æ–º")
            print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—Ä–∞—É–∑–µ—Ä –≤—Ä—É—á–Ω—É\n")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–∫—Ä–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä...")
        
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    finally:
        driver.quit()
        print("\n‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ")


if __name__ == '__main__':
    test_login()
