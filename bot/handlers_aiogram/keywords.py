from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from database import Database
from bot.utils import is_authorized, logger
from bot.keyboards_aiogram import keywords_menu_markup, cancel_markup

router = Router()
db = Database()

class KeywordStates(StatesGroup):
    add_keyword = State()
    toggle_keyword = State()
    follow_keyword = State()
    delete_keyword = State()
    add_template = State()

@router.callback_query(F.data == "menu_keywords")
async def show_keywords_menu(callback: CallbackQuery):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    keywords = db.get_all_keywords()
    
    text = "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
    text += "  üîë <b>–£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ö–õ–Æ–ß–û–í–ò–ú–ò –°–õ–û–í–ê–ú–ò</b>\n"
    text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    
    if keywords:
        text += "üìã <b>–°–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤:</b>\n\n"
        for kw in keywords:
            status = "üü¢" if kw['enabled'] else "üî¥"
            follow = " üë§" if kw.get('should_follow', False) else ""
            templates = db.get_templates_for_keyword(kw['id'])
            text += f"{kw['id']}. {status}{follow} \"{kw['keyword']}\"\n"
            text += f"   {len(templates)} —à–∞–±–ª–æ–Ω—ñ–≤\n\n"
    else:
        text += "‚ö†Ô∏è –ö–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —â–µ –Ω–µ–º–∞—î\n\n"
    
    text += "<b>–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:</b>"
    
    await callback.message.edit_text(text, reply_markup=keywords_menu_markup(), parse_mode='HTML')
    await callback.answer()

@router.callback_query(F.data == "kw_add")
async def add_keyword_start(callback: CallbackQuery, state: FSMContext):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    await callback.message.answer(
        "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É –ø–æ—Å—Ç—ñ–≤:\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <i>–∫—Ä–∏–ø—Ç–æ, NFT, –±–ª–æ–∫—á–µ–π–Ω</i>",
        parse_mode='HTML',
        reply_markup=cancel_markup()
    )
    await state.set_state(KeywordStates.add_keyword)
    await callback.answer()

@router.message(KeywordStates.add_keyword)
async def process_add_keyword(message: Message, state: FSMContext):
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        await state.clear()
        await message.answer("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=ReplyKeyboardRemove())
        return
    
    keyword = message.text.strip()
    if not keyword:
        await message.answer("‚ùå –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º!")
        return
    
    try:
        db.add_keyword(keyword)
        await message.answer(f"‚úÖ –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ \"{keyword}\" –¥–æ–¥–∞–Ω–æ!", reply_markup=ReplyKeyboardRemove())
        logger.info(f"–î–æ–¥–∞–Ω–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ: {keyword}")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", reply_markup=ReplyKeyboardRemove())
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {e}")
    
    await state.clear()

@router.callback_query(F.data == "kw_toggle")
async def toggle_keyword_start(callback: CallbackQuery, state: FSMContext):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    keywords = db.get_all_keywords()
    if not keywords:
        await callback.answer("‚ö†Ô∏è –ù–µ–º–∞—î –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤!", show_alert=True)
        return
    
    text = "üî¢ –í–≤–µ–¥—ñ—Ç—å ID –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É:\n\n"
    text += "\n".join([f"{kw['id']}. {'üü¢' if kw['enabled'] else 'üî¥'} {kw['keyword']}" for kw in keywords])
    
    await callback.message.answer(text, reply_markup=cancel_markup())
    await state.set_state(KeywordStates.toggle_keyword)
    await callback.answer()

@router.message(KeywordStates.toggle_keyword)
async def process_toggle_keyword(message: Message, state: FSMContext):
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        await state.clear()
        await message.answer("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=ReplyKeyboardRemove())
        return
    
    try:
        keyword_id = int(message.text)
        db.toggle_keyword(keyword_id)
        await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ #{keyword_id} –∑–º—ñ–Ω–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
        logger.info(f"–ó–º—ñ–Ω–µ–Ω–æ —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ ID: {keyword_id}")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID!")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", reply_markup=ReplyKeyboardRemove())
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É: {e}")
    
    await state.clear()

@router.callback_query(F.data == "kw_follow")
async def follow_keyword_start(callback: CallbackQuery, state: FSMContext):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    keywords = db.get_all_keywords()
    if not keywords:
        await callback.answer("‚ö†Ô∏è –ù–µ–º–∞—î –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤!", show_alert=True)
        return
    
    text = "üë§ –í–≤–µ–¥—ñ—Ç—å ID –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∑–º—ñ–Ω–∏ –ø—ñ–¥–ø–∏—Å–∫–∏:\n\n"
    for kw in keywords:
        follow_status = " üë§" if kw.get('should_follow', False) else ""
        text += f"{kw['id']}. {kw['keyword']}{follow_status}\n"
    
    await callback.message.answer(text, reply_markup=cancel_markup())
    await state.set_state(KeywordStates.follow_keyword)
    await callback.answer()

@router.message(KeywordStates.follow_keyword)
async def process_follow_keyword(message: Message, state: FSMContext):
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        await state.clear()
        await message.answer("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=ReplyKeyboardRemove())
        return
    
    try:
        keyword_id = int(message.text)
        db.toggle_keyword_follow(keyword_id)
        await message.answer(f"‚úÖ –ü—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ #{keyword_id} –∑–º—ñ–Ω–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
        logger.info(f"–ó–º—ñ–Ω–µ–Ω–æ –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ ID: {keyword_id}")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID!")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", reply_markup=ReplyKeyboardRemove())
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
    
    await state.clear()

@router.callback_query(F.data == "kw_delete")
async def delete_keyword_start(callback: CallbackQuery, state: FSMContext):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    keywords = db.get_all_keywords()
    if not keywords:
        await callback.answer("‚ö†Ô∏è –ù–µ–º–∞—î –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤!", show_alert=True)
        return
    
    text = "üóëÔ∏è –í–≤–µ–¥—ñ—Ç—å ID –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n\n"
    text += "\n".join([f"{kw['id']}. {kw['keyword']}" for kw in keywords])
    
    await callback.message.answer(text, reply_markup=cancel_markup())
    await state.set_state(KeywordStates.delete_keyword)
    await callback.answer()

@router.message(KeywordStates.delete_keyword)
async def process_delete_keyword(message: Message, state: FSMContext):
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        await state.clear()
        await message.answer("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=ReplyKeyboardRemove())
        return
    
    try:
        keyword_id = int(message.text)
        db.delete_keyword(keyword_id)
        await message.answer(f"‚úÖ –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ #{keyword_id} –≤–∏–¥–∞–ª–µ–Ω–æ!", reply_markup=ReplyKeyboardRemove())
        logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ ID: {keyword_id}")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID!")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", reply_markup=ReplyKeyboardRemove())
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}")
    
    await state.clear()

@router.callback_query(F.data == "kw_templates")
async def templates_menu(callback: CallbackQuery):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    keywords = db.get_all_keywords()
    if not keywords:
        await callback.answer("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞!", show_alert=True)
        return
    
    text = "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
    text += "  üìù <b>–®–ê–ë–õ–û–ù–ò –ö–û–ú–ï–ù–¢–ê–†–Ü–í</b>\n"
    text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    text += "–í–∏–±–µ—Ä—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ:"
    
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    for kw in keywords:
        templates_count = len(db.get_templates_for_keyword(kw['id']))
        markup.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{kw['keyword']} ({templates_count} —à–∞–±–ª–æ–Ω—ñ–≤)",
                callback_data=f"template_select_{kw['id']}"
            )
        ])
    markup.inline_keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_keywords")])
    
    await callback.message.edit_text(text, reply_markup=markup, parse_mode='HTML')
    await callback.answer()

@router.callback_query(F.data.startswith("template_select_"))
async def show_keyword_templates(callback: CallbackQuery):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    keyword_id = int(callback.data.split("_")[2])
    keyword = db.get_keyword_by_id(keyword_id)
    templates = db.get_templates_for_keyword(keyword_id)
    
    text = f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
    text += f"  üìù <b>–®–ê–ë–õ–û–ù–ò: \"{keyword['keyword']}\"</b>\n"
    text += f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    
    if templates:
        for i, template in enumerate(templates, 1):
            text += f"{i}. {template['template_text']}\n\n"
    else:
        text += "‚ö†Ô∏è –ù–µ–º–∞—î —à–∞–±–ª–æ–Ω—ñ–≤\n\n"
    
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —à–∞–±–ª–æ–Ω", callback_data=f"template_add_{keyword_id}")])
    
    if templates:
        for template in templates:
            markup.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏: {template['template_text'][:30]}...",
                    callback_data=f"template_delete_{template['id']}_{keyword_id}"
                )
            ])
    
    markup.inline_keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="kw_templates")])
    
    await callback.message.edit_text(text, reply_markup=markup, parse_mode='HTML')
    await callback.answer()

@router.callback_query(F.data.startswith("template_add_"))
async def add_template_start(callback: CallbackQuery, state: FSMContext):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    keyword_id = int(callback.data.split("_")[2])
    await state.update_data(keyword_id=keyword_id)
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω—É –∫–æ–º–µ–Ω—Ç–∞—Ä—è:", reply_markup=cancel_markup())
    await state.set_state(KeywordStates.add_template)
    await callback.answer()

@router.message(KeywordStates.add_template)
async def process_add_template(message: Message, state: FSMContext):
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        await state.clear()
        await message.answer("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=ReplyKeyboardRemove())
        return
    
    template_text = message.text.strip()
    if not template_text:
        await message.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º!")
        return
    
    data = await state.get_data()
    try:
        db.add_template(data['keyword_id'], template_text)
        await message.answer("‚úÖ –®–∞–±–ª–æ–Ω –¥–æ–¥–∞–Ω–æ!", reply_markup=ReplyKeyboardRemove())
        logger.info(f"–î–æ–¥–∞–Ω–æ —à–∞–±–ª–æ–Ω –¥–ª—è keyword_id: {data['keyword_id']}")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", reply_markup=ReplyKeyboardRemove())
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É: {e}")
    
    await state.clear()

@router.callback_query(F.data.startswith("template_delete_"))
async def delete_template(callback: CallbackQuery):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    template_id = int(callback.data.split("_")[2])
    keyword_id = int(callback.data.split("_")[3])
    
    db.delete_template(template_id)
    await callback.answer("‚úÖ –®–∞–±–ª–æ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ!")
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤
    keyword = db.get_keyword_by_id(keyword_id)
    templates = db.get_templates_for_keyword(keyword_id)
    
    text = f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
    text += f"  üìù <b>–®–ê–ë–õ–û–ù–ò: \"{keyword['keyword']}\"</b>\n"
    text += f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    
    if templates:
        for i, template in enumerate(templates, 1):
            text += f"{i}. {template['template_text']}\n\n"
    else:
        text += "‚ö†Ô∏è –ù–µ–º–∞—î —à–∞–±–ª–æ–Ω—ñ–≤\n\n"
    
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —à–∞–±–ª–æ–Ω", callback_data=f"template_add_{keyword_id}")])
    
    if templates:
        for template in templates:
            markup.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏: {template['template_text'][:30]}...",
                    callback_data=f"template_delete_{template['id']}_{keyword_id}"
                )
            ])
    
    markup.inline_keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="kw_templates")])
    
    await callback.message.edit_text(text, reply_markup=markup, parse_mode='HTML')
