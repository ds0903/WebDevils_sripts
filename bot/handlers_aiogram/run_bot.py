from aiogram import Router, F
from aiogram.types import CallbackQuery
import subprocess
import os

import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from database import Database
from bot.utils import is_authorized, logger
from bot.keyboards_aiogram import run_menu_markup, back_button_markup
from bot.config import BASE_DIR

router = Router()
db = Database()

@router.callback_query(F.data == "menu_run")
async def show_run_menu(callback: CallbackQuery):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    accounts = [a for a in db.get_all_accounts() if a['enabled']]
    keywords = [k for k in db.get_all_keywords() if k['enabled']]
    
    text = "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
    text += "  üöÄ <b>–ó–ê–ü–£–°–ö –ë–û–¢–ê</b>\n"
    text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    
    if not accounts:
        text += "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤!\n\n"
    else:
        text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤: {len(accounts)}\n"
    
    if not keywords:
        text += "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤!\n\n"
    else:
        text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤: {len(keywords)}\n"
        
        follow_keywords = [k for k in keywords if k.get('should_follow', False)]
        if follow_keywords:
            kw_list = ', '.join([f'"{k["keyword"]}"' for k in follow_keywords[:3]])
            if len(follow_keywords) > 3:
                kw_list += f" —Ç–∞ —â–µ {len(follow_keywords) - 3}"
            text += f"üë§ –ó –ø—ñ–¥–ø–∏—Å–∫–æ—é: {len(follow_keywords)}\n   ({kw_list})\n"
    
    if not accounts or not keywords:
        await callback.message.edit_text(text, reply_markup=back_button_markup(), parse_mode='HTML')
        logger.warning("–°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É –±–µ–∑ –∞–∫–∞—É–Ω—Ç—ñ–≤/–∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤")
        await callback.answer()
        return
    
    text += "\n<b>–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:</b>"
    
    await callback.message.edit_text(text, reply_markup=run_menu_markup(), parse_mode='HTML')
    await callback.answer()

@router.callback_query(F.data == "run_once")
async def run_bot_once(callback: CallbackQuery):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    await callback.message.answer(
        "‚ñ∂Ô∏è <b>–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑...</b>\n\n–ü—Ä–æ—Ü–µ—Å –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ —Ñ–æ–Ω—ñ.",
        parse_mode='HTML'
    )
    
    try:
        subprocess.Popen(
            ['python', 'main.py', '--once'],
            cwd=BASE_DIR,
            creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0
        )
        await callback.message.answer(
            "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!\n\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å.",
            reply_markup=back_button_markup()
        )
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º—ñ '–æ–¥–∏–Ω —Ä–∞–∑'")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        await callback.message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    await callback.answer()

@router.callback_query(F.data == "run_loop")
async def run_bot_loop(callback: CallbackQuery):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    await callback.message.answer(
        "‚ñ∂Ô∏è <b>–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –≤ —Ü–∏–∫–ª—ñ...</b>\n\n‚ö†Ô∏è –ë–æ—Ç –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ —Ñ–æ–Ω—ñ –¥–æ –∑—É–ø–∏–Ω–∫–∏!",
        parse_mode='HTML'
    )
    
    try:
        subprocess.Popen(
            ['python', 'main.py'],
            cwd=BASE_DIR,
            creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0
        )
        await callback.message.answer(
            "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ü–∏–∫–ª—ñ!\n\n"
            "–î–ª—è –∑—É–ø–∏–Ω–∫–∏ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –ø—Ä–æ—Ü–µ—Å <code>python main.py</code>",
            parse_mode='HTML',
            reply_markup=back_button_markup()
        )
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ü–∏–∫–ª—ñ—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –≤ —Ü–∏–∫–ª—ñ: {e}")
        await callback.message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    await callback.answer()
