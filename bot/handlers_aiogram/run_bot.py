from aiogram import Router, F
from aiogram.types import CallbackQuery
import subprocess
import os
import psutil

import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from database import Database
from bot.utils import is_authorized, logger
from bot.keyboards_aiogram import run_menu_markup, back_button_markup
from bot.config import BASE_DIR

router = Router()
db = Database()

@router.callback_query(F.data == "menu_run")
async def show_run_menu(callback: CallbackQuery):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    accounts = [a for a in db.get_all_accounts() if a['enabled']]
    keywords = [k for k in db.get_all_keywords() if k['enabled']]
    
    text = "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
    text += "  üöÄ <b>–ó–ê–ü–£–°–ö –ë–û–¢–ê</b>\n"
    text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    
    if not accounts:
        text += "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤!\n\n"
    else:
        text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤: {len(accounts)}\n"
    
    if not keywords:
        text += "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤!\n\n"
    else:
        text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤: {len(keywords)}\n"
        
        follow_keywords = [k for k in keywords if k.get('should_follow', False)]
        if follow_keywords:
            kw_list = ', '.join([f'"{k["keyword"]}"' for k in follow_keywords[:3]])
            if len(follow_keywords) > 3:
                kw_list += f" —Ç–∞ —â–µ {len(follow_keywords) - 3}"
            text += f"üë§ –ó –ø—ñ–¥–ø–∏—Å–∫–æ—é: {len(follow_keywords)}\n   ({kw_list})\n"
    
    if not accounts or not keywords:
        await callback.message.edit_text(text, reply_markup=back_button_markup(), parse_mode='HTML')
        logger.warning("–°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É –±–µ–∑ –∞–∫–∞—É–Ω—Ç—ñ–≤/–∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤")
        await callback.answer()
        return
    
    text += "\n<b>–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:</b>"
    
    await callback.message.edit_text(text, reply_markup=run_menu_markup(), parse_mode='HTML')
    await callback.answer()

@router.callback_query(F.data == "run_once")
async def run_bot_once(callback: CallbackQuery):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        await callback.message.delete()
    except:
        pass
    
    try:
        # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –∑—ñ–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª
        built_bot = os.path.join(BASE_DIR, 'dist', 'threads_bot')
        built_bot_exe = os.path.join(BASE_DIR, 'dist', 'threads_bot.exe')
        
        if os.path.exists(built_bot):
            # Linux/Mac - –∑—ñ–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª
            subprocess.Popen(
                [built_bot, '--once'],
                cwd=BASE_DIR
            )
            logger.info("‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∑—ñ–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª: dist/threads_bot")
            bot_type = "üì¶ –ó—ñ–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª"
        elif os.path.exists(built_bot_exe):
            # Windows - –∑—ñ–±—Ä–∞–Ω–∏–π .exe
            subprocess.Popen(
                [built_bot_exe, '--once'],
                cwd=BASE_DIR,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            logger.info("‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∑—ñ–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª: dist/threads_bot.exe")
            bot_type = "üì¶ –ó—ñ–±—Ä–∞–Ω–∏–π .exe"
        else:
            # –ó—ñ–±—Ä–∞–Ω–æ–≥–æ –Ω–µ–º–∞—î - –∑–∞–ø—É—Å–∫–∞—î–º–æ Python —Å–∫—Ä–∏–ø—Ç
            subprocess.Popen(
                ['python3' if os.name != 'nt' else 'python', 'main.py', '--once'],
                cwd=BASE_DIR,
                creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0
            )
            logger.info("‚úÖ –ó–∞–ø—É—â–µ–Ω–æ Python —Å–∫—Ä–∏–ø—Ç: main.py")
            bot_type = "üêç Python —Å–∫—Ä–∏–ø—Ç"
        
        await callback.message.answer(
            f"‚úÖ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑!</b>\n\n"
            f"üïπ –†–µ–∂–∏–º: {bot_type}\n\n"
            f"‚ö†Ô∏è –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üõë –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞</b>",
            parse_mode='HTML',
            reply_markup=back_button_markup()
        )
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º—ñ '–æ–¥–∏–Ω —Ä–∞–∑'")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        await callback.message.answer(
            f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É:</b> {e}",
            parse_mode='HTML',
            reply_markup=back_button_markup()
        )
    
    await callback.answer()

@router.callback_query(F.data == "run_loop")
async def run_bot_loop(callback: CallbackQuery):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        await callback.message.delete()
    except:
        pass
    
    try:
        # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –∑—ñ–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª
        built_bot = os.path.join(BASE_DIR, 'dist', 'threads_bot')
        built_bot_exe = os.path.join(BASE_DIR, 'dist', 'threads_bot.exe')
        
        if os.path.exists(built_bot):
            # Linux/Mac - –∑—ñ–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª
            subprocess.Popen(
                [built_bot],
                cwd=BASE_DIR
            )
            logger.info("‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∑—ñ–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª –≤ —Ü–∏–∫–ª—ñ: dist/threads_bot")
            bot_type = "üì¶ –ó—ñ–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª"
        elif os.path.exists(built_bot_exe):
            # Windows - –∑—ñ–±—Ä–∞–Ω–∏–π .exe
            subprocess.Popen(
                [built_bot_exe],
                cwd=BASE_DIR,
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            logger.info("‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∑—ñ–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª –≤ —Ü–∏–∫–ª—ñ: dist/threads_bot.exe")
            bot_type = "üì¶ –ó—ñ–±—Ä–∞–Ω–∏–π .exe"
        else:
            # –ó—ñ–±—Ä–∞–Ω–æ–≥–æ –Ω–µ–º–∞—î - –∑–∞–ø—É—Å–∫–∞—î–º–æ Python —Å–∫—Ä–∏–ø—Ç
            subprocess.Popen(
                ['python3' if os.name != 'nt' else 'python', 'main.py'],
                cwd=BASE_DIR,
                creationflags=subprocess.CREATE_NO_WINDOW if os.name == 'nt' else 0
            )
            logger.info("‚úÖ –ó–∞–ø—É—â–µ–Ω–æ Python —Å–∫—Ä–∏–ø—Ç –≤ —Ü–∏–∫–ª—ñ: main.py")
            bot_type = "üêç Python —Å–∫—Ä–∏–ø—Ç"
        
        await callback.message.answer(
            f"‚úÖ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ü–∏–∫–ª—ñ!</b>\n\n"
            f"üïπ –†–µ–∂–∏–º: {bot_type}\n\n"
            f"‚ö†Ô∏è –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üõë –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞</b>",
            parse_mode='HTML',
            reply_markup=back_button_markup()
        )
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ü–∏–∫–ª—ñ—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –≤ —Ü–∏–∫–ª—ñ: {e}")
        await callback.message.answer(
            f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É:</b> {e}",
            parse_mode='HTML',
            reply_markup=back_button_markup()
        )
    
    await callback.answer()

@router.callback_query(F.data == "run_stop")
async def stop_bot(callback: CallbackQuery):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    await callback.answer("üîç –®—É–∫–∞—é –ø—Ä–æ—Ü–µ—Å–∏...")
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        await callback.message.delete()
    except:
        pass
    
    try:
        killed_count = 0
        found_processes = []
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç—É
        project_dir = os.path.abspath(BASE_DIR)
        logger.info(f"–®—É–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å–∏ main.py –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {project_dir}")
        
        # –®—É–∫–∞—î–º–æ –≤—Å—ñ –ø—Ä–æ—Ü–µ—Å–∏ python —â–æ –∑–∞–ø—É—Å–∫–∞—é—Ç—å main.py
        for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'cwd']):
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ python –ø—Ä–æ—Ü–µ—Å
                if proc.info['name'] and 'python' in proc.info['name'].lower():
                    cmdline = proc.info['cmdline']
                    if cmdline:
                        cmdline_str = ' '.join(str(arg) for arg in cmdline)
                        if 'main.py' in cmdline_str:
                            # –ó–Ω–∞–π—à–ª–∏ –ø—Ä–æ—Ü–µ—Å main.py - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–±–æ—á—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
                            try:
                                proc_cwd = proc.cwd()
                                logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å main.py PID {proc.info['pid']}, cwd: {proc_cwd}")
                                
                                # –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–æ—Ü–µ—Å –∑ –ù–ê–®–û–á –ø–∞–ø–∫–∏
                                if proc_cwd == project_dir or proc_cwd.startswith(project_dir):
                                    found_processes.append(proc.info['pid'])
                                    logger.info(f"‚úÖ –¶–µ –Ω–∞—à –ø—Ä–æ—Ü–µ—Å! PID: {proc.info['pid']}")
                                else:
                                    logger.info(f"‚ö†Ô∏è –¶–µ –ù–ï –Ω–∞—à –ø—Ä–æ—Ü–µ—Å (—ñ–Ω—à–∞ –ø–∞–ø–∫–∞), –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ PID: {proc.info['pid']}")
                            except (psutil.AccessDenied, psutil.NoSuchProcess):
                                # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ cwd - –∫—Ä–∞—â–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏
                                logger.warning(f"–ù–µ –º–æ–∂—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ cwd –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É {proc.info['pid']}, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                                continue
            except (psutil.NoSuchProcess, psutil.AccessDenied, KeyError):
                continue
        
        # –ó—É–ø–∏–Ω—è—î–º–æ –∑–Ω–∞–π–¥–µ–Ω—ñ –ø—Ä–æ—Ü–µ—Å–∏
        for pid in found_processes:
            try:
                proc = psutil.Process(pid)
                logger.info(f"–ó—É–ø–∏–Ω—è—î–º–æ –ø—Ä–æ—Ü–µ—Å PID: {pid}")
                proc.terminate()  # –ú'—è–∫–∞ –∑—É–ø–∏–Ω–∫–∞
                try:
                    proc.wait(timeout=3)  # –ß–µ–∫–∞—î–º–æ 3 —Å–µ–∫—É–Ω–¥–∏
                except psutil.TimeoutExpired:
                    logger.warning(f"–ü—Ä–æ—Ü–µ—Å {pid} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è, –ø—Ä–∏–º—É—Å–æ–≤–∞ –∑—É–ø–∏–Ω–∫–∞")
                    proc.kill()  # –ü—Ä–∏–º—É—Å–æ–≤–∞ –∑—É–ø–∏–Ω–∫–∞
                killed_count += 1
                logger.info(f"‚úÖ –ó—É–ø–∏–Ω–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å PID: {pid}")
            except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –ø—Ä–æ—Ü–µ—Å—É {pid}: {e}")
                continue
        
        if killed_count > 0:
            await callback.message.answer(
                f"‚úÖ <b>–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ!</b>\n\n"
                f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—ñ–≤: {killed_count}\n"
                f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {project_dir}",
                parse_mode='HTML',
                reply_markup=back_button_markup()
            )
            logger.info(f"‚úÖ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ (–∑–∞–≤–µ—Ä—à–µ–Ω–æ {killed_count} –ø—Ä–æ—Ü–µ—Å—ñ–≤)")
        else:
            await callback.message.answer(
                "‚ö†Ô∏è <b>–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π</b>\n\n"
                f"–ü—Ä–æ—Ü–µ—Å–∏ main.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó:\n<code>{project_dir}</code>",
                parse_mode='HTML',
                reply_markup=back_button_markup()
            )
            logger.info("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å–∏ main.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        await callback.message.answer(
            f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏:</b> {e}",
            parse_mode='HTML',
            reply_markup=back_button_markup()
        )
