from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from database import Database
from bot.utils import is_authorized, logger
from bot.keyboards_aiogram import accounts_menu_markup, cancel_markup, yes_no_markup, confirm_delete_markup

router = Router()
db = Database()

class AccountStates(StatesGroup):
    add_username = State()
    add_password = State()
    add_max_comments = State()
    
    edit_select = State()
    edit_menu = State()
    edit_password = State()
    edit_max_comments = State()
    
    toggle_select = State()
    delete_select = State()
    delete_confirm = State()

@router.callback_query(F.data == "menu_accounts")
async def show_accounts_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    accounts = db.get_all_accounts()
    
    text = "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
    text += "  üë• <b>–£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ê–ö–ê–£–ù–¢–ê–ú–ò</b>\n"
    text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    
    if accounts:
        text += "üìã <b>–°–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤:</b>\n\n"
        for acc in accounts:
            status = "üü¢" if acc['enabled'] else "üî¥"
            text += f"{acc['id']}. {status} @{acc['username']}\n"
            text += f"   –ú–∞–∫—Å: {acc['max_comments_per_run']} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤\n\n"
    else:
        text += "‚ö†Ô∏è –ê–∫–∞—É–Ω—Ç—ñ–≤ —â–µ –Ω–µ–º–∞—î\n\n"
    
    text += "<b>–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:</b>"
    
    await callback.message.edit_text(text, reply_markup=accounts_menu_markup(), parse_mode='HTML')
    await callback.answer()

@router.callback_query(F.data == "acc_add")
async def add_account_start(callback: CallbackQuery, state: FSMContext):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚ûï <b>–î–û–î–ê–í–ê–ù–ù–Ø –ê–ö–ê–£–ù–¢–£</b>\n\n–í–≤–µ–¥—ñ—Ç—å username (Instagram/Threads):",
        parse_mode='HTML',
        reply_markup=cancel_markup("menu_accounts")
    )
    await state.update_data(last_bot_message_id=callback.message.message_id)
    await state.set_state(AccountStates.add_username)
    await callback.answer()

@router.message(AccountStates.add_username)
async def process_add_username(message: Message, state: FSMContext):
    await state.update_data(username=message.text)
    try:
        await message.delete()
    except:
        pass
    
    data = await state.get_data()
    try:
        await message.bot.delete_message(message.chat.id, data.get('last_bot_message_id'))
    except:
        pass
    
    msg = await message.answer(
        f"‚ûï <b>–î–û–î–ê–í–ê–ù–ù–Ø –ê–ö–ê–£–ù–¢–£</b>\n\nUsername: @{data['username']}\n\n–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:",
        parse_mode='HTML',
        reply_markup=cancel_markup("menu_accounts")
    )
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(AccountStates.add_password)

@router.message(AccountStates.add_password)
async def process_add_password(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    try:
        await message.delete()
    except:
        pass
    
    data = await state.get_data()
    try:
        await message.bot.delete_message(message.chat.id, data.get('last_bot_message_id'))
    except:
        pass
    
    msg = await message.answer(
        f"‚ûï <b>–î–û–î–ê–í–ê–ù–ù–Ø –ê–ö–ê–£–ù–¢–£</b>\n\nUsername: @{data['username']}\n\n–ú–∞–∫—Å–∏–º—É–º –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∑–∞ –∑–∞–ø—É—Å–∫? (–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 5):",
        parse_mode='HTML',
        reply_markup=cancel_markup("menu_accounts")
    )
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(AccountStates.add_max_comments)

@router.message(AccountStates.add_max_comments)
async def process_add_max_comments(message: Message, state: FSMContext):
    max_comments = int(message.text) if message.text.isdigit() else 5
    data = await state.get_data()
    
    try:
        await message.delete()
    except:
        pass
    
    try:
        await message.bot.delete_message(message.chat.id, data.get('last_bot_message_id'))
    except:
        pass
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="menu_accounts")]
    ])
    
    try:
        account_id = db.create_account(
            data['username'],
            data['password'],
            max_comments,
            True
        )
        
        await message.answer(
            f"‚úÖ <b>–ê–∫–∞—É–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\nID: {account_id}\nUsername: @{data['username']}\n–ú–∞–∫—Å. –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: {max_comments}",
            parse_mode='HTML',
            reply_markup=keyboard
        )
        logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –∞–∫–∞—É–Ω—Ç @{data['username']} (ID: {account_id})")
    except Exception as e:
        await message.answer(f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞:</b> {e}", parse_mode='HTML', reply_markup=keyboard)
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É: {e}")
    
    await state.clear()

# ============= –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ê–ö–ê–£–ù–¢–£ =============

@router.callback_query(F.data == "acc_edit")
async def edit_account_start(callback: CallbackQuery, state: FSMContext):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    accounts = db.get_all_accounts()
    if not accounts:
        await callback.answer("‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤", show_alert=True)
        return
    
    text = "‚úèÔ∏è <b>–†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ê–ö–ê–£–ù–¢–£</b>\n\n–í–≤–µ–¥—ñ—Ç—å ID –∞–∫–∞—É–Ω—Ç—É:\n\n"
    for acc in accounts:
        status = "üü¢" if acc['enabled'] else "üî¥"
        text += f"{acc['id']}. {status} @{acc['username']}\n"
    
    await callback.message.edit_text(text, parse_mode='HTML', reply_markup=cancel_markup("menu_accounts"))
    await state.update_data(last_bot_message_id=callback.message.message_id)
    await state.set_state(AccountStates.edit_select)
    await callback.answer()

@router.message(AccountStates.edit_select)
async def process_edit_select(message: Message, state: FSMContext):
    if not message.text.isdigit():
        try:
            await message.delete()
        except:
            pass
        return
    
    account = db.get_account(int(message.text))
    if not account:
        try:
            await message.delete()
        except:
            pass
        data = await state.get_data()
        try:
            await message.bot.delete_message(message.chat.id, data.get('last_bot_message_id'))
        except:
            pass
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="menu_accounts")]
        ])
        await message.answer("‚ùå <b>–ê–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!</b>", parse_mode='HTML', reply_markup=keyboard)
        await state.clear()
        return
    
    await state.update_data(account_id=int(message.text))
    
    try:
        await message.delete()
    except:
        pass
    
    data = await state.get_data()
    try:
        await message.bot.delete_message(message.chat.id, data.get('last_bot_message_id'))
    except:
        pass
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîë –ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å", callback_data="edit_password")],
        [InlineKeyboardButton(text="üî¢ –ú–∞–∫—Å. –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤", callback_data="edit_max_comments")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_accounts")]
    ])
    
    msg = await message.answer(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É @{account['username']}</b>\n\n"
        f"–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n"
        f"–ú–∞–∫—Å. –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: {account['max_comments_per_run']}\n\n"
        f"–©–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?",
        parse_mode='HTML',
        reply_markup=keyboard
    )
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(AccountStates.edit_menu)

@router.callback_query(F.data == "edit_password", AccountStates.edit_menu)
async def edit_password_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîë <b>–†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ê–ö–ê–£–ù–¢–£</b>\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å:",
        parse_mode='HTML',
        reply_markup=cancel_markup("menu_accounts")
    )
    await state.update_data(last_bot_message_id=callback.message.message_id)
    await state.set_state(AccountStates.edit_password)
    await callback.answer()

@router.message(AccountStates.edit_password)
async def process_edit_password(message: Message, state: FSMContext):
    data = await state.get_data()
    account_id = data['account_id']
    
    try:
        await message.delete()
    except:
        pass
    
    try:
        await message.bot.delete_message(message.chat.id, data.get('last_bot_message_id'))
    except:
        pass
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="menu_accounts")]
    ])
    
    try:
        db.update_account(account_id, password=message.text)
        await message.answer("‚úÖ <b>–ü–∞—Ä–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ!</b>", parse_mode='HTML', reply_markup=keyboard)
        logger.info(f"–ó–º—ñ–Ω–µ–Ω–æ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ID {account_id}")
    except Exception as e:
        await message.answer(f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞:</b> {e}", parse_mode='HTML', reply_markup=keyboard)
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è: {e}")
    
    await state.clear()

@router.callback_query(F.data == "edit_max_comments", AccountStates.edit_menu)
async def edit_max_comments_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üî¢ <b>–†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ê–ö–ê–£–ù–¢–£</b>\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞–∫—Å. –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤:",
        parse_mode='HTML',
        reply_markup=cancel_markup("menu_accounts")
    )
    await state.update_data(last_bot_message_id=callback.message.message_id)
    await state.set_state(AccountStates.edit_max_comments)
    await callback.answer()

@router.message(AccountStates.edit_max_comments)
async def process_edit_max_comments(message: Message, state: FSMContext):
    if not message.text.isdigit():
        try:
            await message.delete()
        except:
            pass
        return
    
    data = await state.get_data()
    account_id = data['account_id']
    
    try:
        await message.delete()
    except:
        pass
    
    try:
        await message.bot.delete_message(message.chat.id, data.get('last_bot_message_id'))
    except:
        pass
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="menu_accounts")]
    ])
    
    try:
        db.update_account(account_id, max_comments=int(message.text))
        await message.answer(f"‚úÖ <b>–ú–∞–∫—Å. –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {message.text}!</b>", parse_mode='HTML', reply_markup=keyboard)
        logger.info(f"–ó–º—ñ–Ω–µ–Ω–æ –º–∞–∫—Å. –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è –∞–∫–∞—É–Ω—Ç—É ID {account_id}")
    except Exception as e:
        await message.answer(f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞:</b> {e}", parse_mode='HTML', reply_markup=keyboard)
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –º–∞–∫—Å. –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: {e}")
    
    await state.clear()

# ============= –£–í–Ü–ú–ö/–í–ò–ú–ö –ê–ö–ê–£–ù–¢ =============

@router.callback_query(F.data == "acc_toggle")
async def toggle_account_start(callback: CallbackQuery, state: FSMContext):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    accounts = db.get_all_accounts()
    if not accounts:
        await callback.answer("‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤", show_alert=True)
        return
    
    text = "üîÑ <b>–£–í–Ü–ú–ö/–í–ò–ú–ö –ê–ö–ê–£–ù–¢</b>\n\n–í–≤–µ–¥—ñ—Ç—å ID –∞–∫–∞—É–Ω—Ç—É:\n\n"
    for acc in accounts:
        status = "üü¢ –£–≤—ñ–º–∫–Ω–µ–Ω–æ" if acc['enabled'] else "üî¥ –í–∏–º–∫–Ω–µ–Ω–æ"
        text += f"{acc['id']}. @{acc['username']} - {status}\n"
    
    await callback.message.edit_text(text, parse_mode='HTML', reply_markup=cancel_markup("menu_accounts"))
    await state.update_data(last_bot_message_id=callback.message.message_id)
    await state.set_state(AccountStates.toggle_select)
    await callback.answer()

@router.message(AccountStates.toggle_select)
async def process_toggle_account(message: Message, state: FSMContext):
    if not message.text.isdigit():
        try:
            await message.delete()
        except:
            pass
        return
    
    account = db.get_account(int(message.text))
    if not account:
        try:
            await message.delete()
        except:
            pass
        data = await state.get_data()
        try:
            await message.bot.delete_message(message.chat.id, data.get('last_bot_message_id'))
        except:
            pass
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="menu_accounts")]
        ])
        await message.answer("‚ùå <b>–ê–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!</b>", parse_mode='HTML', reply_markup=keyboard)
        await state.clear()
        return
    
    try:
        await message.delete()
    except:
        pass
    
    data = await state.get_data()
    try:
        await message.bot.delete_message(message.chat.id, data.get('last_bot_message_id'))
    except:
        pass
    
    new_status = not account['enabled']
    db.update_account(int(message.text), enabled=new_status)
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="menu_accounts")]
    ])
    
    status_text = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ üü¢" if new_status else "–≤–∏–º–∫–Ω–µ–Ω–æ üî¥"
    await message.answer(f"‚úÖ <b>–ê–∫–∞—É–Ω—Ç @{account['username']} {status_text}!</b>", parse_mode='HTML', reply_markup=keyboard)
    logger.info(f"–ê–∫–∞—É–Ω—Ç @{account['username']} {status_text}")
    await state.clear()

# ============= –í–ò–î–ê–õ–ï–ù–ù–Ø –ê–ö–ê–£–ù–¢–£ =============

@router.callback_query(F.data == "acc_delete")
async def delete_account_start(callback: CallbackQuery, state: FSMContext):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    accounts = db.get_all_accounts()
    if not accounts:
        await callback.answer("‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤", show_alert=True)
        return
    
    text = "üóëÔ∏è <b>–í–ò–î–ê–õ–ï–ù–ù–Ø –ê–ö–ê–£–ù–¢–£</b>\n\n–í–≤–µ–¥—ñ—Ç—å ID –∞–∫–∞—É–Ω—Ç—É:\n\n"
    for acc in accounts:
        text += f"{acc['id']}. @{acc['username']}\n"
    
    await callback.message.edit_text(text, parse_mode='HTML', reply_markup=cancel_markup("menu_accounts"))
    await state.update_data(last_bot_message_id=callback.message.message_id)
    await state.set_state(AccountStates.delete_select)
    await callback.answer()

@router.message(AccountStates.delete_select)
async def process_delete_select(message: Message, state: FSMContext):
    if not message.text.isdigit():
        try:
            await message.delete()
        except:
            pass
        return
    
    account = db.get_account(int(message.text))
    if not account:
        try:
            await message.delete()
        except:
            pass
        data = await state.get_data()
        try:
            await message.bot.delete_message(message.chat.id, data.get('last_bot_message_id'))
        except:
            pass
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="menu_accounts")]
        ])
        await message.answer("‚ùå <b>–ê–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!</b>", parse_mode='HTML', reply_markup=keyboard)
        await state.clear()
        return
    
    await state.update_data(account_id=int(message.text), username=account['username'])
    
    try:
        await message.delete()
    except:
        pass
    
    data = await state.get_data()
    try:
        await message.bot.delete_message(message.chat.id, data.get('last_bot_message_id'))
    except:
        pass
    
    msg = await message.answer(
        f"‚ö†Ô∏è <b>–í–ò–î–ê–õ–ï–ù–ù–Ø –ê–ö–ê–£–ù–¢–£</b>\n\n–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç @{account['username']}?",
        parse_mode='HTML',
        reply_markup=confirm_delete_markup("delete_confirm_yes")
    )
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(AccountStates.delete_confirm)

@router.callback_query(F.data == "delete_confirm_yes", AccountStates.delete_confirm)
async def process_delete_confirm(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="menu_accounts")]
    ])
    
    try:
        db.delete_account(data['account_id'])
        await callback.message.edit_text(
            f"‚úÖ <b>–ê–∫–∞—É–Ω—Ç @{data['username']} –≤–∏–¥–∞–ª–µ–Ω–æ!</b>",
            parse_mode='HTML',
            reply_markup=keyboard
        )
        logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –∞–∫–∞—É–Ω—Ç @{data['username']} (ID: {data['account_id']})")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞:</b> {e}", parse_mode='HTML', reply_markup=keyboard)
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É: {e}")
    
    await state.clear()
    await callback.answer()
