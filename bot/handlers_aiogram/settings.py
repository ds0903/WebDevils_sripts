from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from database import Database
from bot.utils import is_authorized, logger
from bot.keyboards_aiogram import cancel_markup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()
db = Database()

class SettingsStates(StatesGroup):
    edit_value = State()

def settings_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è±Ô∏è –ó–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏", callback_data="setting_comments_delay")],
        [InlineKeyboardButton(text="‚è±Ô∏è –ó–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –ø–æ—Å—Ç–∞–º–∏", callback_data="setting_posts_delay")],
        [InlineKeyboardButton(text="‚è±Ô∏è –ó–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∞–∫–∞—É–Ω—Ç–∞–º–∏", callback_data="setting_accounts_delay")],
        [InlineKeyboardButton(text="üìÖ –ú–∞–∫—Å. –≤—ñ–∫ –ø–æ—Å—Ç–∞", callback_data="setting_max_age")],
        [InlineKeyboardButton(text="üîÑ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫—É", callback_data="setting_run_interval")],
        [InlineKeyboardButton(text="üîá Headless —Ä–µ–∂–∏–º", callback_data="setting_headless")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

@router.callback_query(F.data == "menu_settings")
async def show_settings_menu(callback: CallbackQuery):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    settings = {
        'delay_between_comments_min': db.get_setting('delay_between_comments_min'),
        'delay_between_comments_max': db.get_setting('delay_between_comments_max'),
        'delay_between_posts_min': db.get_setting('delay_between_posts_min'),
        'delay_between_posts_max': db.get_setting('delay_between_posts_max'),
        'delay_between_accounts_min': db.get_setting('delay_between_accounts_min'),
        'delay_between_accounts_max': db.get_setting('delay_between_accounts_max'),
        'max_post_age_hours': db.get_setting('max_post_age_hours'),
        'run_interval_minutes': db.get_setting('run_interval_minutes'),
        'global_headless_mode': db.get_setting('global_headless_mode') or 'false'
    }
    
    headless_status = "‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ" if settings['global_headless_mode'] == 'true' else "‚ùå –í–∏–º–∫–Ω–µ–Ω–æ"
    
    text = "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
    text += "  ‚öôÔ∏è <b>–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø</b>\n"
    text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
    text += "üìã <b>–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>\n\n"
    
    text += "‚è±Ô∏è <b>–ó–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏:</b>\n"
    text += f"   {settings['delay_between_comments_min']}-{settings['delay_between_comments_max']} —Å–µ–∫\n\n"
    
    text += "‚è±Ô∏è <b>–ó–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –ø–æ—Å—Ç–∞–º–∏:</b>\n"
    text += f"   {settings['delay_between_posts_min']}-{settings['delay_between_posts_max']} —Å–µ–∫\n\n"
    
    text += "‚è±Ô∏è <b>–ó–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∞–∫–∞—É–Ω—Ç–∞–º–∏:</b>\n"
    text += f"   {settings['delay_between_accounts_min']}-{settings['delay_between_accounts_max']} —Å–µ–∫\n\n"
    
    text += "üìÖ <b>–ú–∞–∫—Å. –≤—ñ–∫ –ø–æ—Å—Ç–∞:</b>\n"
    text += f"   {settings['max_post_age_hours']} –≥–æ–¥\n\n"
    
    text += "üîÑ <b>–Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫—É:</b>\n"
    text += f"   {settings['run_interval_minutes']} —Ö–≤\n\n"
    
    text += "üîá <b>–ì–ª–æ–±–∞–ª—å–Ω–∏–π Headless —Ä–µ–∂–∏–º:</b>\n"
    text += f"   {headless_status}\n\n"
    
    text += "<i>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏</i>"
    
    await callback.message.edit_text(text, reply_markup=settings_keyboard(), parse_mode='HTML')
    await callback.answer()
    logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")

# ============= –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ó–ê–¢–†–ò–ú–û–ö –ú–Ü–ñ –ö–û–ú–ï–ù–¢–ê–†–Ø–ú–ò =============

@router.callback_query(F.data == "setting_comments_delay")
async def edit_comments_delay(callback: CallbackQuery, state: FSMContext):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    current_min = db.get_setting('delay_between_comments_min')
    current_max = db.get_setting('delay_between_comments_max')
    
    await callback.message.answer(
        f"‚è±Ô∏è <b>–ó–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏</b>\n\n"
        f"–ü–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: {current_min}-{current_max} —Å–µ–∫\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª (–º—ñ–Ω –º–∞–∫—Å):\n"
        f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 10 30",
        parse_mode='HTML',
        reply_markup=cancel_markup()
    )
    await state.update_data(setting_type='comments_delay')
    await state.set_state(SettingsStates.edit_value)
    await callback.answer()

# ============= –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ó–ê–¢–†–ò–ú–û–ö –ú–Ü–ñ –ü–û–°–¢–ê–ú–ò =============

@router.callback_query(F.data == "setting_posts_delay")
async def edit_posts_delay(callback: CallbackQuery, state: FSMContext):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    current_min = db.get_setting('delay_between_posts_min')
    current_max = db.get_setting('delay_between_posts_max')
    
    await callback.message.answer(
        f"‚è±Ô∏è <b>–ó–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –ø–æ—Å—Ç–∞–º–∏</b>\n\n"
        f"–ü–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: {current_min}-{current_max} —Å–µ–∫\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª (–º—ñ–Ω –º–∞–∫—Å):\n"
        f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 5 15",
        parse_mode='HTML',
        reply_markup=cancel_markup()
    )
    await state.update_data(setting_type='posts_delay')
    await state.set_state(SettingsStates.edit_value)
    await callback.answer()

# ============= –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ó–ê–¢–†–ò–ú–û–ö –ú–Ü–ñ –ê–ö–ê–£–ù–¢–ê–ú–ò =============

@router.callback_query(F.data == "setting_accounts_delay")
async def edit_accounts_delay(callback: CallbackQuery, state: FSMContext):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    current_min = db.get_setting('delay_between_accounts_min')
    current_max = db.get_setting('delay_between_accounts_max')
    
    await callback.message.answer(
        f"‚è±Ô∏è <b>–ó–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∞–∫–∞—É–Ω—Ç–∞–º–∏</b>\n\n"
        f"–ü–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è: {current_min}-{current_max} —Å–µ–∫\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª (–º—ñ–Ω –º–∞–∫—Å):\n"
        f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 60 120",
        parse_mode='HTML',
        reply_markup=cancel_markup()
    )
    await state.update_data(setting_type='accounts_delay')
    await state.set_state(SettingsStates.edit_value)
    await callback.answer()

# ============= –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ú–ê–ö–°. –í–Ü–ö–£ –ü–û–°–¢–ê =============

@router.callback_query(F.data == "setting_max_age")
async def edit_max_age(callback: CallbackQuery, state: FSMContext):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    current_value = db.get_setting('max_post_age_hours')
    
    await callback.message.answer(
        f"üìÖ <b>–ú–∞–∫—Å. –≤—ñ–∫ –ø–æ—Å—Ç–∞</b>\n\n"
        f"–ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {current_value} –≥–æ–¥\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è (0 = –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å):",
        parse_mode='HTML',
        reply_markup=cancel_markup()
    )
    await state.update_data(setting_type='max_age')
    await state.set_state(SettingsStates.edit_value)
    await callback.answer()

# ============= –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –Ü–ù–¢–ï–†–í–ê–õ–£ –ó–ê–ü–£–°–ö–£ =============

@router.callback_query(F.data == "setting_run_interval")
async def edit_run_interval(callback: CallbackQuery, state: FSMContext):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    current_value = db.get_setting('run_interval_minutes')
    
    await callback.message.answer(
        f"üîÑ <b>–Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫—É</b>\n\n"
        f"–ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {current_value} —Ö–≤\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö:",
        parse_mode='HTML',
        reply_markup=cancel_markup()
    )
    await state.update_data(setting_type='run_interval')
    await state.set_state(SettingsStates.edit_value)
    await callback.answer()

# ============= HEADLESS –†–ï–ñ–ò–ú =============

@router.callback_query(F.data == "setting_headless")
async def toggle_headless(callback: CallbackQuery):
    if not is_authorized(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    current_value = db.get_setting('global_headless_mode') or 'false'
    new_value = 'false' if current_value == 'true' else 'true'
    
    db.update_setting('global_headless_mode', new_value)
    
    status = "‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_value == 'true' else "‚ùå –í–∏–º–∫–Ω–µ–Ω–æ"
    await callback.answer(f"Headless —Ä–µ–∂–∏–º: {status}", show_alert=True)
    
    logger.info(f"–ó–º—ñ–Ω–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π headless —Ä–µ–∂–∏–º –Ω–∞ {new_value}")
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω—é
    await show_settings_menu(callback)

# ============= –û–ë–†–û–ë–ö–ê –í–í–ï–î–ï–ù–ò–• –ó–ù–ê–ß–ï–ù–¨ =============

@router.message(SettingsStates.edit_value)
async def process_setting_value(message: Message, state: FSMContext):
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        await state.clear()
        await message.answer("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=ReplyKeyboardRemove())
        return
    
    data = await state.get_data()
    setting_type = data['setting_type']
    
    try:
        if setting_type in ['comments_delay', 'posts_delay', 'accounts_delay']:
            # –ü–∞—Ä—Å–∏–º–æ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–Ω—è
            values = message.text.strip().split()
            if len(values) != 2:
                await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª (–º—ñ–Ω –º–∞–∫—Å)")
                return
            
            min_val = int(values[0])
            max_val = int(values[1])
            
            if min_val >= max_val:
                await message.answer("‚ùå –ú—ñ–Ω—ñ–º—É–º –º–∞—î –±—É—Ç–∏ –º–µ–Ω—à–µ –º–∞–∫—Å–∏–º—É–º—É")
                return
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–ª—é—á—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            if setting_type == 'comments_delay':
                db.update_setting('delay_between_comments_min', str(min_val))
                db.update_setting('delay_between_comments_max', str(max_val))
                await message.answer(f"‚úÖ –ó–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏: {min_val}-{max_val} —Å–µ–∫", reply_markup=ReplyKeyboardRemove())
            elif setting_type == 'posts_delay':
                db.update_setting('delay_between_posts_min', str(min_val))
                db.update_setting('delay_between_posts_max', str(max_val))
                await message.answer(f"‚úÖ –ó–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –ø–æ—Å—Ç–∞–º–∏: {min_val}-{max_val} —Å–µ–∫", reply_markup=ReplyKeyboardRemove())
            elif setting_type == 'accounts_delay':
                db.update_setting('delay_between_accounts_min', str(min_val))
                db.update_setting('delay_between_accounts_max', str(max_val))
                await message.answer(f"‚úÖ –ó–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∞–∫–∞—É–Ω—Ç–∞–º–∏: {min_val}-{max_val} —Å–µ–∫", reply_markup=ReplyKeyboardRemove())
            
        elif setting_type == 'max_age':
            value = int(message.text.strip())
            if value < 0:
                await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ >= 0")
                return
            
            db.update_setting('max_post_age_hours', str(value))
            await message.answer(f"‚úÖ –ú–∞–∫—Å. –≤—ñ–∫ –ø–æ—Å—Ç–∞: {value} –≥–æ–¥", reply_markup=ReplyKeyboardRemove())
            
        elif setting_type == 'run_interval':
            value = int(message.text.strip())
            if value <= 0:
                await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ > 0")
                return
            
            db.update_setting('run_interval_minutes', str(value))
            await message.answer(f"‚úÖ –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫—É: {value} —Ö–≤", reply_markup=ReplyKeyboardRemove())
        
        logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è {setting_type}")
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
        return
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", reply_markup=ReplyKeyboardRemove())
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")
    
    await state.clear()
