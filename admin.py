import os
import sys
from database import Database
from datetime import datetime


class AdminPanel:
    def __init__(self):
        self.db = Database()
    
    def clear_screen(self):
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def print_header(self, text):
        print("\n" + "=" * 70)
        print(f"  {text}")
        print("=" * 70)
    
    def print_menu(self, title, options):
        self.print_header(title)
        for key, value in options.items():
            print(f"{key}. {value}")
        print("0. –ù–∞–∑–∞–¥")
    
    def get_input(self, prompt):
        return input(f"\n{prompt}: ").strip()
    
    # === –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ ===
    
    def main_menu(self):
        while True:
            self.clear_screen()
            self.print_menu("ü§ñ THREADS BOT - –ê–î–ú–Ü–ù –ü–ê–ù–ï–õ–¨", {
                '1': 'üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞–º–∏',
                '2': 'üîë –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏',
                '3': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—è',
                '4': '‚öôÔ∏è  –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
                '5': 'üöÄ –ó–ê–ü–£–°–¢–ò–¢–ò –ë–û–¢–ê',
            })
            
            choice = self.get_input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")
            
            if choice == '1':
                self.accounts_menu()
            elif choice == '2':
                self.keywords_menu()
            elif choice == '3':
                self.statistics_menu()
            elif choice == '4':
                self.settings_menu()
            elif choice == '5':
                self.run_bot()
            elif choice == '0':
                print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
    
    # === –ê–ö–ê–£–ù–¢–ò ===
    
    def accounts_menu(self):
        while True:
            self.clear_screen()
            self.print_header("üë• –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ê–ö–ê–£–ù–¢–ê–ú–ò")
            
            accounts = self.db.get_all_accounts()
            
            if accounts:
                print("\nüìã –°–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤:\n")
                for acc in accounts:
                    status = "üü¢" if acc['enabled'] else "üî¥"
                    headless = "üëÅÔ∏è" if not acc['headless'] else "üîá"
                    print(f"{acc['id']}. {status} {headless} @{acc['username']} "
                          f"(–º–∞–∫—Å: {acc['max_comments_per_run']} –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤)")
            else:
                print("\n‚ö†Ô∏è  –ê–∫–∞—É–Ω—Ç—ñ–≤ —â–µ –Ω–µ–º–∞—î")
            
            print("\n" + "-" * 70)
            print("1. ‚ûï –î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç")
            print("2. ‚úèÔ∏è  –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç")
            print("3. üóëÔ∏è  –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç")
            print("4. üîÑ –£–≤—ñ–º–∫–Ω—É—Ç–∏/–í–∏–º–∫–Ω—É—Ç–∏ –∞–∫–∞—É–Ω—Ç")
            print("0. –ù–∞–∑–∞–¥")
            
            choice = self.get_input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")
            
            if choice == '1':
                self.add_account()
            elif choice == '2':
                self.edit_account()
            elif choice == '3':
                self.delete_account()
            elif choice == '4':
                self.toggle_account()
            elif choice == '0':
                break
    
    def add_account(self):
        print("\n‚ûï –î–û–î–ê–í–ê–ù–ù–Ø –ù–û–í–û–ì–û –ê–ö–ê–£–ù–¢–£\n")
        
        username = self.get_input("Username (Instagram/Threads)")
        if not username:
            print("‚ùå Username –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
            return
        
        password = self.get_input("Password")
        if not password:
            print("‚ùå Password –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
            return
        
        max_comments = self.get_input("–ú–∞–∫—Å. –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∑–∞ –∑–∞–ø—É—Å–∫ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 5)")
        max_comments = int(max_comments) if max_comments.isdigit() else 5
        
        headless = self.get_input("Headless —Ä–µ–∂–∏–º? (y/n, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º n)").lower() == 'y'
        
        try:
            account_id = self.db.create_account(username, password, max_comments, True, headless)
            print(f"\n‚úÖ –ê–∫–∞—É–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ! ID: {account_id}")
        except Exception as e:
            print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
    
    def edit_account(self):
        account_id = self.get_input("ID –∞–∫–∞—É–Ω—Ç—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
        if not account_id.isdigit():
            return
        
        account = self.db.get_account(int(account_id))
        if not account:
            print("‚ùå –ê–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
            return
        
        print(f"\n‚úèÔ∏è  –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ê–ö–ê–£–ù–¢–£ @{account['username']}\n")
        print("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –±–µ–∑ –∑–º—ñ–Ω\n")
        
        username = self.get_input(f"Username [{account['username']}]")
        password = self.get_input(f"Password [***]")
        max_comments = self.get_input(f"–ú–∞–∫—Å. –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ [{account['max_comments_per_run']}]")
        
        updates = {}
        if username:
            updates['username'] = username
        if password:
            updates['password'] = password
        if max_comments.isdigit():
            updates['max_comments'] = int(max_comments)
        
        if updates:
            self.db.update_account(int(account_id), **updates)
            print("\n‚úÖ –ê–∫–∞—É–Ω—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            print("\n‚ö†Ô∏è  –ó–º—ñ–Ω –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
    
    def delete_account(self):
        account_id = self.get_input("ID –∞–∫–∞—É–Ω—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
        if not account_id.isdigit():
            return
        
        account = self.db.get_account(int(account_id))
        if not account:
            print("‚ùå –ê–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
            return
        
        confirm = self.get_input(f"–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç @{account['username']}? (yes/no)")
        if confirm.lower() == 'yes':
            self.db.delete_account(int(account_id))
            print("\n‚úÖ –ê–∫–∞—É–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ!")
        else:
            print("\n‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
    
    def toggle_account(self):
        account_id = self.get_input("ID –∞–∫–∞—É–Ω—Ç—É")
        if not account_id.isdigit():
            return
        
        account = self.db.get_account(int(account_id))
        if not account:
            print("‚ùå –ê–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
            return
        
        new_status = not account['enabled']
        self.db.update_account(int(account_id), enabled=new_status)
        
        status_text = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_status else "–≤–∏–º–∫–Ω–µ–Ω–æ"
        print(f"\n‚úÖ –ê–∫–∞—É–Ω—Ç @{account['username']} {status_text}!")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
    
    # === –ö–õ–Æ–ß–û–í–Ü –°–õ–û–í–ê ===
    
    def keywords_menu(self):
        while True:
            self.clear_screen()
            self.print_header("üîë –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ö–õ–Æ–ß–û–í–ò–ú–ò –°–õ–û–í–ê–ú–ò")
            
            keywords = self.db.get_all_keywords()
            
            if keywords:
                print("\nüìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤:\n")
                for kw in keywords:
                    status = "üü¢" if kw['enabled'] else "üî¥"
                    templates = self.db.get_templates_for_keyword(kw['id'])
                    print(f"{kw['id']}. {status} \"{kw['keyword']}\" ({len(templates)} —à–∞–±–ª–æ–Ω—ñ–≤)")
            else:
                print("\n‚ö†Ô∏è  –ö–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —â–µ –Ω–µ–º–∞—î")
            
            print("\n" + "-" * 70)
            print("1. ‚ûï –î–æ–¥–∞—Ç–∏ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ")
            print("2. üìù –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —à–∞–±–ª–æ–Ω–∞–º–∏")
            print("3. üîÑ –£–≤—ñ–º–∫–Ω—É—Ç–∏/–í–∏–º–∫–Ω—É—Ç–∏")
            print("4. üóëÔ∏è  –í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ")
            print("0. –ù–∞–∑–∞–¥")
            
            choice = self.get_input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")
            
            if choice == '1':
                self.add_keyword()
            elif choice == '2':
                self.manage_templates()
            elif choice == '3':
                self.toggle_keyword()
            elif choice == '4':
                self.delete_keyword()
            elif choice == '0':
                break
    
    def add_keyword(self):
        print("\n‚ûï –î–û–î–ê–í–ê–ù–ù–Ø –ö–õ–Æ–ß–û–í–û–ì–û –°–õ–û–í–ê\n")
        
        keyword = self.get_input("–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ")
        if not keyword:
            print("‚ùå –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
            return
        
        try:
            keyword_id = self.db.create_keyword(keyword, True)
            print(f"\n‚úÖ –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! ID: {keyword_id}")
            print("\n–î–æ–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ —Å–ª–æ–≤–∞:")
            
            while True:
                template = self.get_input("–®–∞–±–ª–æ–Ω –∫–æ–º–µ–Ω—Ç–∞—Ä—è (Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è)")
                if not template:
                    break
                
                self.db.create_template(keyword_id, template)
                print("‚úÖ –®–∞–±–ª–æ–Ω –¥–æ–¥–∞–Ω–æ!")
            
        except Exception as e:
            print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
    
    def manage_templates(self):
        keyword_id = self.get_input("ID –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞")
        if not keyword_id.isdigit():
            return
        
        keyword = self.db.get_keyword(int(keyword_id))
        if not keyword:
            print("‚ùå –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
            return
        
        while True:
            self.clear_screen()
            self.print_header(f"üìù –®–ê–ë–õ–û–ù–ò –î–õ–Ø \"{keyword['keyword']}\"")
            
            templates = self.db.get_templates_for_keyword(int(keyword_id))
            
            if templates:
                print("\nüìã –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤:\n")
                for idx, tmpl in enumerate(templates, 1):
                    print(f"{tmpl['id']}. {tmpl['template_text']}")
            else:
                print("\n‚ö†Ô∏è  –®–∞–±–ª–æ–Ω—ñ–≤ —â–µ –Ω–µ–º–∞—î")
            
            print("\n" + "-" * 70)
            print("1. ‚ûï –î–æ–¥–∞—Ç–∏ —à–∞–±–ª–æ–Ω")
            print("2. üóëÔ∏è  –í–∏–¥–∞–ª–∏—Ç–∏ —à–∞–±–ª–æ–Ω")
            print("0. –ù–∞–∑–∞–¥")
            
            choice = self.get_input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")
            
            if choice == '1':
                template = self.get_input("–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω—É")
                if template:
                    self.db.create_template(int(keyword_id), template)
                    print("‚úÖ –®–∞–±–ª–æ–Ω –¥–æ–¥–∞–Ω–æ!")
                    input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
            elif choice == '2':
                template_id = self.get_input("ID —à–∞–±–ª–æ–Ω—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
                if template_id.isdigit():
                    self.db.delete_template(int(template_id))
                    print("‚úÖ –®–∞–±–ª–æ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ!")
                    input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
            elif choice == '0':
                break
    
    def toggle_keyword(self):
        keyword_id = self.get_input("ID –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞")
        if not keyword_id.isdigit():
            return
        
        keyword = self.db.get_keyword(int(keyword_id))
        if not keyword:
            print("‚ùå –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
            return
        
        new_status = not keyword['enabled']
        self.db.update_keyword(int(keyword_id), enabled=new_status)
        
        status_text = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_status else "–≤–∏–º–∫–Ω–µ–Ω–æ"
        print(f"\n‚úÖ –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ \"{keyword['keyword']}\" {status_text}!")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
    
    def delete_keyword(self):
        keyword_id = self.get_input("ID –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
        if not keyword_id.isdigit():
            return
        
        keyword = self.db.get_keyword(int(keyword_id))
        if not keyword:
            print("‚ùå –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
            return
        
        confirm = self.get_input(f"–í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ \"{keyword['keyword']}\"? (yes/no)")
        if confirm.lower() == 'yes':
            self.db.delete_keyword(int(keyword_id))
            print("\n‚úÖ –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
        else:
            print("\n‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
    
    # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    
    def statistics_menu(self):
        while True:
            self.clear_screen()
            self.print_header("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ê –Ü–°–¢–û–†–Ü–Ø")
            
            stats = self.db.get_statistics()
            
            print("\nüìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
            print(f"–í—Å—å–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: {stats['total']}")
            print(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö: {stats['success']}")
            print(f"‚ö†Ô∏è  –ù–µ–≤–¥–∞–ª–∏—Ö: {stats['failed']}")
            print(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {stats['error']}")
            
            if stats['total'] > 0:
                success_rate = (stats['success'] / stats['total']) * 100
                print(f"\nüìä Success Rate: {success_rate:.1f}%")
            
            print("\n" + "-" * 70)
            print("1. üìú –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é (–æ—Å—Ç–∞–Ω–Ω—ñ 50)")
            print("2. üîç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—é —ñ—Å—Ç–æ—Ä—ñ—é (–æ—Å—Ç–∞–Ω–Ω—ñ 200)")
            print("0. –ù–∞–∑–∞–¥")
            
            choice = self.get_input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")
            
            if choice == '1':
                self.view_history(50)
            elif choice == '2':
                self.view_history(200)
            elif choice == '0':
                break
    
    def view_history(self, limit):
        self.clear_screen()
        self.print_header(f"üìú –Ü–°–¢–û–†–Ü–Ø –ö–û–ú–ï–ù–¢–ê–†–Ü–í (–æ—Å—Ç–∞–Ω–Ω—ñ {limit})")
        
        history = self.db.get_comment_history(limit)
        
        if not history:
            print("\n‚ö†Ô∏è  –Ü—Å—Ç–æ—Ä—ñ—ó —â–µ –Ω–µ–º–∞—î")
        else:
            for item in history:
                status_icon = {
                    'success': '‚úÖ',
                    'failed': '‚ö†Ô∏è',
                    'error': '‚ùå'
                }.get(item['status'], '‚ùì')
                
                date = datetime.fromisoformat(item['created_at']).strftime('%Y-%m-%d %H:%M')
                
                print(f"\n{status_icon} {date} | @{item['username']} ‚Üí \"{item['keyword']}\"")
                if item['comment_text']:
                    print(f"   üí¨ {item['comment_text'][:60]}...")
                if item['error_message']:
                    print(f"   ‚ùó {item['error_message']}")
        
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
    
    # === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
    
    def settings_menu(self):
        while True:
            self.clear_screen()
            self.print_header("‚öôÔ∏è  –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø")
            
            settings = self.db.get_all_settings()
            
            print("\nüìã –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n")
            for idx, setting in enumerate(settings, 1):
                print(f"{idx}. {setting['description']}")
                print(f"   –ö–ª—é—á: {setting['key']}")
                print(f"   –ó–Ω–∞—á–µ–Ω–Ω—è: {setting['value']}\n")
            
            print("-" * 70)
            print("1. ‚úèÔ∏è  –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
            print("0. –ù–∞–∑–∞–¥")
            
            choice = self.get_input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é")
            
            if choice == '1':
                self.edit_settings()
            elif choice == '0':
                break
    
    def edit_settings(self):
        settings = self.db.get_all_settings()
        
        print("\n‚úèÔ∏è  –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨\n")
        
        for idx, setting in enumerate(settings, 1):
            print(f"{idx}. {setting['description']} [–ü–æ—Ç–æ—á–Ω–µ: {setting['value']}]")
        
        choice = self.get_input("\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–º—ñ–Ω–∏ (0 –¥–ª—è –≤–∏—Ö–æ–¥—É)")
        
        if not choice.isdigit() or int(choice) == 0:
            return
        
        idx = int(choice) - 1
        if 0 <= idx < len(settings):
            setting = settings[idx]
            new_value = self.get_input(f"–ù–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è '{setting['description']}'")
            
            if new_value:
                self.db.update_setting(setting['key'], new_value)
                print("\n‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!")
            else:
                print("\n‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
        else:
            print("\n‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!")
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
    
    # === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
    
    def run_bot(self):
        self.clear_screen()
        self.print_header("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê")
        
        accounts = [a for a in self.db.get_all_accounts() if a['enabled']]
        keywords = [k for k in self.db.get_all_keywords() if k['enabled']]
        
        if not accounts:
            print("\n‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
            return
        
        if not keywords:
            print("\n‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤!")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
            return
        
        print(f"\n‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤: {len(accounts)}")
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤: {len(keywords)}")
        
        print("\n1. üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑")
        print("2. üîÅ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤ —Ü–∏–∫–ª—ñ (–∫–æ–∂–Ω—ñ X —Ö–≤–∏–ª–∏–Ω)")
        print("0. –ù–∞–∑–∞–¥")
        
        choice = self.get_input("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º")
        
        if choice == '1':
            print("\n‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞...\n")
            os.system('python main.py --once')
        elif choice == '2':
            print("\n‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –≤ —Ü–∏–∫–ª—ñ...\n")
            os.system('python main.py')
        
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")


def main():
    try:
        admin = AdminPanel()
        admin.main_menu()
    except KeyboardInterrupt:
        print("\n\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()
